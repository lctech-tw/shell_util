name: build.v1.golang
on:
  workflow_call:
    inputs:
      APP_NAME:
        description: 'This app name'
        required: true
        type: string
      APP_DOCKER_REPOSITORIES:
        description: 'docker repositories name'
        required: true
        type: string
      GCP_PROJECT:
        description: 'gcp project'
        required: true
        type: string
      ZMODE:
        description: 'mode'
        required: false
        type: string
        default: dev
      GO_VERSION:
        description: 'vseion'
        required: false
        type: string
        default: "1.19"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: ‚öôÔ∏è Obtain GitHub App Installation Access Token
        id: githubAppAuth
        run: |
          TOKEN=$(npx obtain-github-app-installation-access-token ci ${{ secrets.GH_APP_CREDENTIALS_TOKEN }})
          echo "::add-mask::$TOKEN"
          echo "::set-output name=token::$TOKEN"
      - name: ‚öôÔ∏è Setting GitHub Auth
        run : |
           git config --global url."https://oauth2:$GITHUB_TOKEN@github.com/lctech-tw".insteadOf "https://github.com/lctech-tw" 
        env:
          GITHUB_TOKEN: ${{ steps.githubAppAuth.outputs.token }}
      - name: ‚öôÔ∏è Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          credentials_json:  ${{ secrets.GCP_SA_KEY_GITHUB_CI }}
      - name: ‚öôÔ∏è Initialize Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
      - name: ‚öôÔ∏è setting docker auth
        run: |
          gcloud auth configure-docker -q
          gcloud auth configure-docker $(echo ${{ inputs.APP_DOCKER_REPOSITORIES }}  | cut -d "/" -f 1) -q
      - name: ‚öôÔ∏è Set up Golang
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.GO_VERSION }}
      - name: ‚öôÔ∏è build Golang
        run: |
          cd ./cmd/server/ && go build .
      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: ‚õ¥ Docker build / tag / push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          cache-to: type=gha,mode=max
          cache-from: type=gha
          file: .github/docker/Dockerfile
          tags: |
            ${{ inputs.APP_DOCKER_REPOSITORIES }}/${{ inputs.APP_NAME }}:latest
            ${{ inputs.APP_DOCKER_REPOSITORIES }}/${{ inputs.APP_NAME }}:${{ github.sha }}
            ${{ inputs.APP_DOCKER_REPOSITORIES }}/${{ inputs.APP_NAME }}:${{ inputs.ZMODE }}-${{ github.run_number }}
            ${{ inputs.APP_DOCKER_REPOSITORIES }}/${{ inputs.APP_NAME }}:${{ github.ref_name }}-${{ github.run_number }}
        # run : |
        #   docker buildx build \
        #     --cache-from=type=gha \
        #     --cache-to=type=gha,mode=max \
        #     -f .github/docker/Dockerfile \
        #     -t ${{ inputs.APP_DOCKER_REPOSITORIES }}/${{ inputs.APP_NAME }} \
        #     -t ${{ inputs.APP_DOCKER_REPOSITORIES }}/${{ inputs.APP_NAME }} ${{ inputs.APP_DOCKER_REPOSITORIES }}/${{ inputs.APP_NAME }}:${GITHUB_SHA::7} \
        #     -t ${{ inputs.APP_DOCKER_REPOSITORIES }}/${{ inputs.APP_NAME }} ${{ inputs.APP_DOCKER_REPOSITORIES }}/${{ inputs.APP_NAME }}:${{ github.run_number }} \
        #     -t ${{ inputs.APP_DOCKER_REPOSITORIES }}/${{ inputs.APP_NAME }} ${{ inputs.APP_DOCKER_REPOSITORIES }}/${{ inputs.APP_NAME }}:${{ inputs.ZMODE }}-${{ github.run_number }} \
        #     .
      # - name: üì® Notification via Slack
      #   if: always()
      #   run: |
      #     curl -LJO https://raw.githubusercontent.com/lctech-tw/util_scripts/main/notify_slack.sh 
      #     if [[ '${{ job.status }}' == 'failure' ]] ;then
      #       echo "Run slack on Fail (X)"
      #       bash ./notify_slack.sh -f
      #     else
      #       echo "Run slack on Success (O)"
      #       bash ./notify_slack.sh -s
      #     fi
